/*
 * Market Data API
 * The BraveNewCoin API is an HTTP API. The BraveNewCoin APIs provide market data information about crypto assets. 
 *
 * OpenAPI spec version: v3
 * Contact: support@bravenewcoin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bnc.api.v3.client.autogen.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.UUID;

/**
 * Asset
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaClientCodegen", date = "2018-08-17T11:47:51.512+12:00[Pacific/Auckland]")
public class Asset {

  
  @JsonProperty("id")
  private UUID id = null;
  
  
  @JsonProperty("name")
  private String name = null;
  
  
  @JsonProperty("symbol")
  private String symbol = null;
  
  /**
   * The status of the asset.
   */
  public enum StatusEnum {
    
    ACTIVE("ACTIVE"),
    INACTIVE("INACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    
    @JsonValue
    
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    
    @JsonCreator
    
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    
  }
  
  
  @JsonProperty("status")
  private StatusEnum status = null;
  
  /**
   * Indicator for the type of the asset.
   */
  public enum TypeEnum {
    
    FIAT("FIAT"),
    CRYPTO("CRYPTO");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    
    @JsonValue
    
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    
    @JsonCreator
    
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    
  }
  
  
  @JsonProperty("type")
  private TypeEnum type = null;
  
  
  @JsonProperty("url")
  private String url = null;
  
  
  @JsonProperty("supplyUrl")
  private String supplyUrl = null;
  
  public Asset id(UUID id) {
    this.id = id;
    return this;
  }

  
  /**
  * Unique identifier for the resource.
  * @return id
  **/
  
  
  @Schema(description = "Unique identifier for the resource.")
  public UUID getId() {
    return id;
  }
  public void setId(UUID id) {
    this.id = id;
  }
  
  public Asset name(String name) {
    this.name = name;
    return this;
  }

  
  /**
  * The friendly name of the asset.
  * @return name
  **/
  
  
  @Schema(description = "The friendly name of the asset.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  
  public Asset symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  
  /**
  * The ticker symbol of the asset.
  * @return symbol
  **/
  
  
  @Schema(description = "The ticker symbol of the asset.")
  public String getSymbol() {
    return symbol;
  }
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }
  
  public Asset status(StatusEnum status) {
    this.status = status;
    return this;
  }

  
  /**
  * The status of the asset.
  * @return status
  **/
  
  
  @Schema(description = "The status of the asset.")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  
  public Asset type(TypeEnum type) {
    this.type = type;
    return this;
  }

  
  /**
  * Indicator for the type of the asset.
  * @return type
  **/
  
  
  @Schema(description = "Indicator for the type of the asset.")
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }
  
  public Asset url(String url) {
    this.url = url;
    return this;
  }

  
  /**
  * The url of where information about the asset can be found.
  * @return url
  **/
  
  
  @Schema(description = "The url of where information about the asset can be found.")
  public String getUrl() {
    return url;
  }
  public void setUrl(String url) {
    this.url = url;
  }
  
  public Asset supplyUrl(String supplyUrl) {
    this.supplyUrl = supplyUrl;
    return this;
  }

  
  /**
  * The url where the asset supply information can be found.
  * @return supplyUrl
  **/
  
  
  @Schema(description = "The url where the asset supply information can be found.")
  public String getSupplyUrl() {
    return supplyUrl;
  }
  public void setSupplyUrl(String supplyUrl) {
    this.supplyUrl = supplyUrl;
  }
  
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Asset asset = (Asset) o;
    return Objects.equals(this.id, asset.id) &&
        Objects.equals(this.name, asset.name) &&
        Objects.equals(this.symbol, asset.symbol) &&
        Objects.equals(this.status, asset.status) &&
        Objects.equals(this.type, asset.type) &&
        Objects.equals(this.url, asset.url) &&
        Objects.equals(this.supplyUrl, asset.supplyUrl);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, name, symbol, status, type, url, supplyUrl);
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Asset {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    supplyUrl: ").append(toIndentedString(supplyUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}



