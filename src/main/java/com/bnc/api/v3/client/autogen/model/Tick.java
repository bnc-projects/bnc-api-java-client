/*
 * Market Data API
 * The BraveNewCoin API is an HTTP API. The BraveNewCoin APIs provide market data information about crypto assets. 
 *
 * OpenAPI spec version: v3
 * Contact: support@bravenewcoin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bnc.api.v3.client.autogen.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * Tick
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaClientCodegen", date = "2018-08-17T11:47:51.512+12:00[Pacific/Auckland]")
public class Tick {

  
  @JsonProperty("id")
  private UUID id = null;
  
  
  @JsonProperty("exchangeId")
  private UUID exchangeId = null;
  
  
  @JsonProperty("marketId")
  private UUID marketId = null;
  
  
  @JsonProperty("last")
  private String last = null;
  
  
  @JsonProperty("volume")
  private String volume = null;
  
  
  @JsonProperty("bid")
  private String bid = null;
  
  
  @JsonProperty("ask")
  private String ask = null;
  
  
  @JsonProperty("timestamp")
  private OffsetDateTime timestamp = null;
  
  public Tick id(UUID id) {
    this.id = id;
    return this;
  }

  
  /**
  * Unique identifier for the resource.
  * @return id
  **/
  
  
  @Schema(description = "Unique identifier for the resource.")
  public UUID getId() {
    return id;
  }
  public void setId(UUID id) {
    this.id = id;
  }
  
  public Tick exchangeId(UUID exchangeId) {
    this.exchangeId = exchangeId;
    return this;
  }

  
  /**
  * Unique identifier for the exchange.
  * @return exchangeId
  **/
  
  
  @Schema(description = "Unique identifier for the exchange.")
  public UUID getExchangeId() {
    return exchangeId;
  }
  public void setExchangeId(UUID exchangeId) {
    this.exchangeId = exchangeId;
  }
  
  public Tick marketId(UUID marketId) {
    this.marketId = marketId;
    return this;
  }

  
  /**
  * Unique identifier for the market.
  * @return marketId
  **/
  
  
  @Schema(description = "Unique identifier for the market.")
  public UUID getMarketId() {
    return marketId;
  }
  public void setMarketId(UUID marketId) {
    this.marketId = marketId;
  }
  
  public Tick price(String price) {
    this.last = price;
    return this;
  }

  
  /**
  * The last traded last at the timestamp in the quote asset.
  * @return last
  **/
  
  
  @Schema(description = "The last traded last at the timestamp in the quote asset.")
  public String getLast() {
    return last;
  }
  public void setLast(String last) {
    this.last = last;
  }
  
  public Tick volume(String volume) {
    this.volume = volume;
    return this;
  }

  
  /**
  * The volume of the base asset in the last 24 hours.
  * @return volume
  **/
  
  
  @Schema(description = "The volume of the base asset in the last 24 hours.")
  public String getVolume() {
    return volume;
  }
  public void setVolume(String volume) {
    this.volume = volume;
  }
  
  public Tick bid(String bid) {
    this.bid = bid;
    return this;
  }

  
  /**
  * The bid last in the quote asset.
  * @return bid
  **/
  
  
  @Schema(description = "The bid last in the quote asset.")
  public String getBid() {
    return bid;
  }
  public void setBid(String bid) {
    this.bid = bid;
  }
  
  public Tick ask(String ask) {
    this.ask = ask;
    return this;
  }

  
  /**
  * The ask last in the quote asset.
  * @return ask
  **/
  
  
  @Schema(description = "The ask last in the quote asset.")
  public String getAsk() {
    return ask;
  }
  public void setAsk(String ask) {
    this.ask = ask;
  }
  
  public Tick timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  
  /**
  * The timestamp from when the market data was collected from the exchange.
  * @return timestamp
  **/
  
  
  @Schema(description = "The timestamp from when the market data was collected from the exchange.")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }
  
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tick tick = (Tick) o;
    return Objects.equals(this.id, tick.id) &&
        Objects.equals(this.exchangeId, tick.exchangeId) &&
        Objects.equals(this.marketId, tick.marketId) &&
        Objects.equals(this.last, tick.last) &&
        Objects.equals(this.volume, tick.volume) &&
        Objects.equals(this.bid, tick.bid) &&
        Objects.equals(this.ask, tick.ask) &&
        Objects.equals(this.timestamp, tick.timestamp);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, exchangeId, marketId, last, volume, bid, ask, timestamp);
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tick {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    exchangeId: ").append(toIndentedString(exchangeId)).append("\n");
    sb.append("    marketId: ").append(toIndentedString(marketId)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
    sb.append("    ask: ").append(toIndentedString(ask)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}



